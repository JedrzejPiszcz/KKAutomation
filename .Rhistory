license()
help()
library(sp)
install.packages("sp")
install.packages("sp")
help install.packages()
help("install.packages")
install.packages("sp")
install.packages("sp", lib="/data/Rpackages/")
library(RPostgreSQL)
install.packages("RPostgreSQL")
library(RPostgreSQL)
help("dbConnect")
#rm(list=ls())     #czyści workspace
library(openxlsx) #biblioteka odpowiednia dla duzych plikow .xls/.xlsx
wd<-"C:/GIT/Automatyzacja_KK/KKAutomation" #ustawić working directory
if(getwd()!=wd){setwd(wd)}
env_ZIPCMD<-"C:/Rtools/bin/zip"                           #nalezy ustawic sciezke do pliku zip w pakiecie rtools
if(Sys.getenv("R_ZIPCMD")!=env_ZIPCMD){Sys.setenv(R_ZIPCMD = env_ZIPCMD)}
#source - MUSI być wywoływany po ustawieniu WD
source("drukuj_czas.R")              #Wypisuje czas od początku wykonywania skryptu + komentarz
source("sprawdz_PESEL.R")            #sprawdza sumę kontrolną dla numeru PESEL, jeżeli jest poprawna zwraca T, w każdy innym wypadku F
source("Skrypt_usun_puste.R")        #usuwa puste rzędy bazując na pustych polach kolumny "Filia"
source("Skrypt_ID.R")                #ID
source("Skrypt_produkt.R")           #Produkt
source("Skrypt_zwrotki_v2.R")        #Zwortki
source("Skrypt_kategorie_wiekowe.R") #Wiek, Kategorie wiekowe[Lic, sum], Kategorie wiekowe[sp, mba]
source("Skrypt_obywatelstwo.R")      #Cudzoziemiec
source("Skrypt_maturzysta.R")        #Maturzysta
source("Skrypt_status_rekrutacji.R") #Status rekrutacji
source("Skrypt_lokalizacje.R")       #Gmina, powiat, województwo,dystanse
#zmienne dla skrytpu
rokBazy<-"2016"
#START obliczeń
start.time <- Sys.time()
#Wczytywanie danych
if(exists("dane")==F){
dane<-read.csv2("C:/JP/TEB Akademia/Automatyzacja KK/Baza KK 18.07.2016/wynik.csv", header = T, sep=";", encoding="UTF-8")
#dane<- read.xlsx("../KK/wynik_dodatek.xlsx", sheet = 1)
}
drukuj_czas(start.time, "Załadowano dane.")
if(exists("zwrotki1")==F){zwrotki1 <- read.xlsx("C:/JP/TEB Akademia/Automatyzacja KK/Bazy zwrotek/Zwrotki 2011-2015 - okrojone.xlsx", sheet = 1)}
drukuj_czas(start.time, "Załadowano zwrotki 1.")
if(exists("zwrotki2")==F){zwrotki2 <- read.xlsx("C:/JP/TEB Akademia/Automatyzacja KK/Bazy zwrotek/zwrotki 2016.06.20.xlsx", sheet = 3)}
drukuj_czas(start.time, "Załadowano zwrotki 2.")
lista_pola_dane_zwrotki<-c("Imię", "Nazwisko", "Kod.zamieszkania", "Kod.korespondencji", "Email","Telefon.kom.", "id")
lista_pola_zwrotki1<-c("kod1", "e-mail", "telefon")
lista_pola_zwrotki2<-c("KOD", "e-mail", "telefon_dobry")
dane<-generuj_ID(dane)
drukuj_czas(start.time, "Wygenerowano ID.")
dane<-usun_puste(dane)
drukuj_czas(start.time, "Usunieto puste pola.")
dane<-generuj_produkt(dane)
drukuj_czas(start.time, "Wygenerowano produkt.")
dane<-generuj_zwrotki(dane, zwrotki1, lista_pola_dane_zwrotki, lista_pola_zwrotki1)
drukuj_czas(start.time, "Wygenerowano zwrotki 1.")
dane<-generuj_zwrotki(dane, zwrotki2, lista_pola_dane_zwrotki, lista_pola_zwrotki2)
drukuj_czas(start.time, "Wygenerowano zwrotki 2.")
dane<-generuj_kategorie_wiekowe(dane, rokBazy)
drukuj_czas(start.time, "Wygenerowano kategorie wiekowe.")
dane<-generuj_obywatelstwo(dane)
drukuj_czas(start.time, "Wygenerowano obywatelstwa.")
dane<-generuj_maturzysta(dane)
drukuj_czas(start.time, "Wygenerowano maturzystów.")
dane<-generuj_status_rekrutacji(dane)
drukuj_czas(start.time, "Wygenerowano status rekrutacji.")
#dane<-generuj_lokalizacje(dane)
#drukuj_czas(start.time, "Wygenerowano lokalizacje.")
#zapis pliku .xlsx
write.xlsx(dane, paste0("wynik_R_", as.character(Sys.Date()), "_dodatek.xlsx"))
drukuj_czas(start.time, "Ukończono obliczenia.")
#ujednolicić nazwy pól generowanych przez skrypt w df
dane<-generuj_zwrotki(dane, zwrotki1, lista_pola_dane_zwrotki, lista_pola_zwrotki1)
#rm(list=ls())     #czyści workspace
library(openxlsx) #biblioteka odpowiednia dla duzych plikow .xls/.xlsx
wd<-"C:/GIT/Automatyzacja_KK/KKAutomation" #ustawić working directory
if(getwd()!=wd){setwd(wd)}
env_ZIPCMD<-"C:/Rtools/bin/zip"                           #nalezy ustawic sciezke do pliku zip w pakiecie rtools
if(Sys.getenv("R_ZIPCMD")!=env_ZIPCMD){Sys.setenv(R_ZIPCMD = env_ZIPCMD)}
#source - MUSI być wywoływany po ustawieniu WD
source("drukuj_czas.R")              #Wypisuje czas od początku wykonywania skryptu + komentarz
source("sprawdz_PESEL.R")            #sprawdza sumę kontrolną dla numeru PESEL, jeżeli jest poprawna zwraca T, w każdy innym wypadku F
source("Skrypt_usun_puste.R")        #usuwa puste rzędy bazując na pustych polach kolumny "Filia"
source("Skrypt_ID.R")                #ID
source("Skrypt_produkt.R")           #Produkt
source("Skrypt_zwrotki_v2.R")        #Zwortki
source("Skrypt_kategorie_wiekowe.R") #Wiek, Kategorie wiekowe[Lic, sum], Kategorie wiekowe[sp, mba]
source("Skrypt_obywatelstwo.R")      #Cudzoziemiec
source("Skrypt_maturzysta.R")        #Maturzysta
source("Skrypt_status_rekrutacji.R") #Status rekrutacji
source("Skrypt_lokalizacje.R")       #Gmina, powiat, województwo,dystanse
#zmienne dla skrytpu
rokBazy<-"2016"
#START obliczeń
start.time <- Sys.time()
#Wczytywanie danych
if(exists("dane")==F){
dane<-read.csv2("C:/JP/TEB Akademia/Automatyzacja KK/Baza KK 18.07.2016/wynik.csv", header = T, sep=";", encoding="UTF-8")
#dane<- read.xlsx("../KK/wynik_dodatek.xlsx", sheet = 1)
}
drukuj_czas(start.time, "Załadowano dane.")
if(exists("zwrotki1")==F){zwrotki1 <- read.xlsx("C:/JP/TEB Akademia/Automatyzacja KK/Bazy zwrotek/Zwrotki 2011-2015 - okrojone.xlsx", sheet = 1)}
drukuj_czas(start.time, "Załadowano zwrotki 1.")
if(exists("zwrotki2")==F){zwrotki2 <- read.xlsx("C:/JP/TEB Akademia/Automatyzacja KK/Bazy zwrotek/zwrotki 2016.06.20.xlsx", sheet = 3)}
drukuj_czas(start.time, "Załadowano zwrotki 2.")
lista_pola_dane_zwrotki<-c("Imię", "Nazwisko", "Kod.zamieszkania", "Kod.korespondencji", "Email","Telefon.kom.", "id")
lista_pola_zwrotki1<-c("kod1", "e-mail", "telefon")
lista_pola_zwrotki2<-c("KOD", "e-mail", "telefon_dobry")
dane<-generuj_ID(dane)
drukuj_czas(start.time, "Wygenerowano ID.")
dane<-usun_puste(dane)
drukuj_czas(start.time, "Usunieto puste pola.")
dane<-generuj_produkt(dane)
drukuj_czas(start.time, "Wygenerowano produkt.")
dane<-generuj_zwrotki(dane, zwrotki1, lista_pola_dane_zwrotki, lista_pola_zwrotki1)
drukuj_czas(start.time, "Wygenerowano zwrotki 1.")
dane<-generuj_zwrotki(dane, zwrotki2, lista_pola_dane_zwrotki, lista_pola_zwrotki2)
drukuj_czas(start.time, "Wygenerowano zwrotki 2.")
dane<-generuj_kategorie_wiekowe(dane, rokBazy)
drukuj_czas(start.time, "Wygenerowano kategorie wiekowe.")
dane<-generuj_obywatelstwo(dane)
drukuj_czas(start.time, "Wygenerowano obywatelstwa.")
dane<-generuj_maturzysta(dane)
drukuj_czas(start.time, "Wygenerowano maturzystów.")
dane<-generuj_status_rekrutacji(dane)
drukuj_czas(start.time, "Wygenerowano status rekrutacji.")
#dane<-generuj_lokalizacje(dane)
#drukuj_czas(start.time, "Wygenerowano lokalizacje.")
#zapis pliku .xlsx
write.xlsx(dane, paste0("wynik_R_", as.character(Sys.Date()), "_dodatek.xlsx"))
drukuj_czas(start.time, "Ukończono obliczenia.")
#ujednolicić nazwy pól generowanych przez skrypt w df
typeof(dane$Rok.ukończenia)
typeof(dane$rok.bazy)
Data$Rok.ukończenia==Data$rok.bazy[1])
Data$Rok.ukończenia==Data$rok.bazy[1]
Data<-dane
Data$Rok.ukończenia==Data$rok.bazy[1]
Data$Rok.ukończenia
Data$rok.bazy
Data$Rok.ukończenia==Data$rok.bazy
Data$Rok.ukończenia==Data$rok.bazy[1]
rm(list=ls())     #czyści workspace
library(openxlsx) #biblioteka odpowiednia dla duzych plikow .xls/.xlsx
wd<-"C:/GIT/Automatyzacja_KK/KKAutomation" #ustawić working directory
if(getwd()!=wd){setwd(wd)}
env_ZIPCMD<-"C:/Rtools/bin/zip"                           #nalezy ustawic sciezke do pliku zip w pakiecie rtools
if(Sys.getenv("R_ZIPCMD")!=env_ZIPCMD){Sys.setenv(R_ZIPCMD = env_ZIPCMD)}
#source - MUSI być wywoływany po ustawieniu WD
source("drukuj_czas.R")              #Wypisuje czas od początku wykonywania skryptu + komentarz
source("sprawdz_PESEL.R")            #sprawdza sumę kontrolną dla numeru PESEL, jeżeli jest poprawna zwraca T, w każdy innym wypadku F
source("Skrypt_usun_puste.R")        #usuwa puste rzędy bazując na pustych polach kolumny "Filia"
source("Skrypt_ID.R")                #ID
source("Skrypt_produkt.R")           #Produkt
source("Skrypt_zwrotki_v2.R")        #Zwortki
source("Skrypt_kategorie_wiekowe.R") #Wiek, Kategorie wiekowe[Lic, sum], Kategorie wiekowe[sp, mba]
source("Skrypt_obywatelstwo.R")      #Cudzoziemiec
source("Skrypt_maturzysta.R")        #Maturzysta
source("Skrypt_status_rekrutacji.R") #Status rekrutacji
source("Skrypt_lokalizacje.R")       #Gmina, powiat, województwo,dystanse
#zmienne dla skrytpu
rokBazy<-"2016"
#START obliczeń
start.time <- Sys.time()
#Wczytywanie danych
if(exists("dane")==F){
dane<-read.csv2("C:/JP/TEB Akademia/Automatyzacja KK/Baza KK 18.07.2016/wynik.csv", header = T, sep=";", encoding="UTF-8")
#dane<- read.xlsx("../KK/wynik_dodatek.xlsx", sheet = 1)
}
drukuj_czas(start.time, "Załadowano dane.")
if(exists("zwrotki1")==F){zwrotki1 <- read.xlsx("C:/JP/TEB Akademia/Automatyzacja KK/Bazy zwrotek/Zwrotki 2011-2015 - okrojone.xlsx", sheet = 1)}
drukuj_czas(start.time, "Załadowano zwrotki 1.")
if(exists("zwrotki2")==F){zwrotki2 <- read.xlsx("C:/JP/TEB Akademia/Automatyzacja KK/Bazy zwrotek/zwrotki 2016.06.20.xlsx", sheet = 3)}
drukuj_czas(start.time, "Załadowano zwrotki 2.")
lista_pola_dane_zwrotki<-c("Imię", "Nazwisko", "Kod.zamieszkania", "Kod.korespondencji", "Email","Telefon.kom.", "id")
lista_pola_zwrotki1<-c("kod1", "e-mail", "telefon")
lista_pola_zwrotki2<-c("KOD", "e-mail", "telefon_dobry")
dane<-generuj_ID(dane)
drukuj_czas(start.time, "Wygenerowano ID.")
dane<-usun_puste(dane)
drukuj_czas(start.time, "Usunieto puste pola.")
dane<-generuj_produkt(dane)
drukuj_czas(start.time, "Wygenerowano produkt.")
dane<-generuj_zwrotki(dane, zwrotki1, lista_pola_dane_zwrotki, lista_pola_zwrotki1)
drukuj_czas(start.time, "Wygenerowano zwrotki 1.")
dane<-generuj_zwrotki(dane, zwrotki2, lista_pola_dane_zwrotki, lista_pola_zwrotki2)
drukuj_czas(start.time, "Wygenerowano zwrotki 2.")
dane<-generuj_kategorie_wiekowe(dane, rokBazy)
drukuj_czas(start.time, "Wygenerowano kategorie wiekowe.")
dane<-generuj_obywatelstwo(dane)
drukuj_czas(start.time, "Wygenerowano obywatelstwa.")
dane<-generuj_maturzysta(dane)
drukuj_czas(start.time, "Wygenerowano maturzystów.")
dane<-generuj_status_rekrutacji(dane)
drukuj_czas(start.time, "Wygenerowano status rekrutacji.")
#dane<-generuj_lokalizacje(dane)
#drukuj_czas(start.time, "Wygenerowano lokalizacje.")
#zapis pliku .xlsx
write.xlsx(dane, paste0("wynik_R_", as.character(Sys.Date()), "_dodatek.xlsx"), overwrite = F)
drukuj_czas(start.time, "Ukończono obliczenia.")
#ujednolicić nazwy pól generowanych przez skrypt w df
write.xlsx(dane, paste0("wynik_R_", as.character(Sys.Date()), "_dodatek.xlsx"))
names(Data)
names(dane)
agrep("^Zwrotki*_2016_R", names(dane), max.distance = 0.1)
agrep("^Zwrotki*_2016_R", names(dane), max.distance = 1.0)
agrep("^zwrotki*_2016_R", names(dane), max.distance = 1.0)
agrep("Zwrotki", names(dane), max.distance = 1.0)
agrep("Zwrotki*", names(dane), max.distance = 1.0)
agrep("^Zwrotki", names(dane), max.distance = 1.0)
agrep("^Zwrotki", names(dane), ignore.case = T, max.distance = 1.0)
agrep("^zwrotki", names(dane), ignore.case = T, max.distance = 1.0)
agrep("^zwrotki*", names(dane), ignore.case = T, max.distance = 1.0)
agrep("^zwrotki?", names(dane), ignore.case = T, max.distance = 1.0)
agrep("^zwrotki[?]", names(dane), ignore.case = T, max.distance = 1.0)
agrep("^zwrotki[*]", names(dane), ignore.case = T, max.distance = 1.0)
agrep("^zwrotki[0-9]*", names(dane), ignore.case = T, max.distance = 1.0)
agrep("[0-9]", names(dane), ignore.case = T, max.distance = 1.0)
agrep("1", names(dane), ignore.case = T, max.distance = 1.0)
agrep("^[a-zA-Z]", names(dane), ignore.case = T, max.distance = 1.0)
agrep("[a-zA-Z]", names(dane), ignore.case = T, max.distance = 1.0)
agrep("[:digit:]", names(dane), ignore.case = T, max.distance = 1.0)
agrep("[:digit:]*", names(dane), ignore.case = T, max.distance = 1.0)
grep("[:digit:]*", names(dane), ignore.case = T)
grep("^zwrotki[:digit:]*_2016", names(dane), ignore.case = T)
grep("^zwrotki[:digit:]*", names(dane), ignore.case = T)
names(dane)
grep("^zwrotki[:digit:]*_2016_R", names(dane), ignore.case = T)
grep("^zwrotki[:digit:]*", names(dane), ignore.case = T)
grep("^zwrotki[:digit:]*", "zwrotki", ignore.case = T)
grep("^zwrotki[:digit:]*", "zwrotki2", ignore.case = T)
grep("^zwrotki[:digit:]*", "zwrotk", ignore.case = T)
grep("^zwrotki[:digit:]*", "zwrotki", ignore.case = T)
grep("^zwrotki\\d", "zwrotki", ignore.case = T)
grep("^zwrotki\\d", "zwrotki2", ignore.case = T)
grep("^zwrotki\\d", names(dane), ignore.case = T)
grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)
colnames<-names(dane[[grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)]])
colnames
dane[[grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)]]
names(dane)
names(dane)[119]
colnames<-names(dane)[[grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)]]
col_index<-grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)
col_index
col_index<-grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)
for(i in col_index){
col_names[i]<-names(dane)[i]
}
col_index<-grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)
col_names<-character(length(col_index))
for(i in col_index){
col_names[i]<-names(dane)[i]
}
col_index<-grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)
col_names<-character(length(col_index))
for(i in col_index){
col_names[i]<-names(dane)[i]
}
col_names
col_index
length(col_index)
col_ names<-character(2)
col_names<-character(2)
for(i in col_index){
i++
print(i)
}
for(i in col_index){
print(i)
}
names(dane)[119]
names(dane)[120]
col_index<-grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)
col_names<-character(length(col_index))
col_index<-grep("^zwrotki\\d_2016_R", names(dane), ignore.case = T)
col_names<-character(length(col_index))
for(i in 1:length(col_index)){
col_names[i]<-names(dane)[col_index[i]]
}
dane$id
intersect(dane, "ZWROTKOWICZ")
intersect(dane$zwrotki1_2016_R, "ZWROTKOWICZ")
help("intersect")
setequal()
is.element("ZWROTKOWICZ", dane$zwrotki1_2016_R)
setequal("ZWROTKOWICZ", dane$zwrotki1_2016_R)
which(dane$zwrotki1_2016_R=="ZWROTKOWICZ")
which(dane$zwrotki2_2016_R=="ZWROTKOWICZ")
union(which(dane$zwrotki2_2016_R=="ZWROTKOWICZ"), which(dane$zwrotki1_2016_R=="ZWROTKOWICZ"))
col_index<-grep("^zwrotki\\d_2016_R", names(Data), ignore.case = T)
col_names<-character(length(col_index))
for(i in 1:length(col_index)){
col_names[i]<-names(Data)[col_index[i]]
}
Data$Zwrotki_FIN<-""
Data$Zwrotki[union(which(dane$zwrotki2_2016_R=="ZWROTKOWICZ"),
which(dane$zwrotki1_2016_R=="ZWROTKOWICZ"))]<-"ZWROTKOWICZ"
Data<-dane
col_index<-grep("^zwrotki\\d_2016_R", names(Data), ignore.case = T)
col_names<-character(length(col_index))
for(i in 1:length(col_index)){
col_names[i]<-names(Data)[col_index[i]]
}
Data$Zwrotki_FIN<-""
Data$Zwrotki[union(which(Data$zwrotki2_2016_R=="ZWROTKOWICZ"),
which(Data$zwrotki1_2016_R=="ZWROTKOWICZ"))]<-"ZWROTKOWICZ"
Data$Zwrotki
Data$Zwrotki[which(Data$Zwrotki=="ZWROTKOWICZ")]
col_index<-grep("^zwrotki\\d_2016_R", names(Data), ignore.case = T)
col_names<-character(length(col_index))
for(i in 1:length(col_index)){
col_names[i]<-names(Data)[col_index[i]]
}
Data$Zwrotki_FIN<-"NIEZWROTKOWICZ"
Data$Zwrotki_FIN[union(which(Data$zwrotki2_2016_R=="ZWROTKOWICZ"),
which(Data$zwrotki1_2016_R=="ZWROTKOWICZ"))]<-"ZWROTKOWICZ"
Data$Zwrotki_FIN
paste0("which(Data$", i, "==ZWROTKOWICZ),")
i<-col_names[1]
paste0("which(Data$", i, "==ZWROTKOWICZ),")
concat_col_names<-""
for(i in col_names){
concat_col_names<-paste0(concat_col_names, "which(Data$", i, "==ZWROTKOWICZ)")
}
concat_col_names
concat_col_names<-""
for(i in col_names){
concat_col_names<-paste0(concat_col_names, "which(Data$", i, "==ZWROTKOWICZ),")
}
concat_col_names
substr(concat_col_names, (length(concat_col_names)-1), length(concat_col_names))
substr(concat_col_names, 1, (length(concat_col_names)-1))
concat_col_names<-""
for(i in col_names){
concat_col_names<-paste0(concat_col_names, "which(Data$", i, "==ZWROTKOWICZ),")
}
substr(concat_col_names, (length(concat_col_names)-1), length(concat_col_names))
concat_col_names<-""
for(i in col_names){
concat_col_names<-paste0(concat_col_names, "which(Data$", i, "==ZWROTKOWICZ),")
}
concat_col_names
substr(concat_col_names, (length(concat_col_names)-1), length(concat_col_names))
substr()
help("substr")
substr(concat_col_names, 1, (length(concat_col_names)-1))
lenght(concat_col_names)
length(concat_col_names)
concat_col_names
nchar(concat_col_names)
substr(concat_col_names, 1, (nchar(concat_col_names)-1))
concat_col_names<-substr(concat_col_names, 1, (nchar(concat_col_names)-1))
concat_col_names
union(concat_col_names)
eval(parse(concat_col_names))
concat_col_names
eval(parse(text = concat_col_names))
do.call(union, concat_col_names)
do.call(union, which(Data$zwrotki2_2016_R=="ZWROTKOWICZ"), which(Data$zwrotki1_2016_R=="ZWROTKOWICZ"))
l<-c(paste0(which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")), paste0(which(Data$zwrotki1_2016_R=="ZWROTKOWICZ")))
do.call(union, l)
l<-c(paste0(which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")), paste0(which(Data$zwrotki1_2016_R=="ZWROTKOWICZ")))
listeczka<-c(paste0(which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")), paste0(which(Data$zwrotki1_2016_R=="ZWROTKOWICZ")))
paste0(which(Data$zwrotki2_2016_R=="ZWROTKOWICZ"))
l<-c(paste0("which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")"), paste0("which(Data$zwrotki1_2016_R=="ZWROTKOWICZ")"))
l<-c(paste0("which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")"), paste0("which(Data$zwrotki1_2016_R=="ZWROTKOWICZ")"))
l<-c(paste0("which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")"), "which(Data$zwrotki1_2016_R=="ZWROTKOWICZ")"))
paste0("which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")")
paste("which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")")
"which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")"
paste("which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")")
help(union)
l[["x"]] = which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")
l[["x"]] = paste0(which(Data$zwrotki2_2016_R=="ZWROTKOWICZ"))
l[["x"]] = paste0("which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")")
which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")
x<-which(Data$zwrotki2_2016_R=="ZWROTKOWICZ")
y<-which(Data$zwrotki1_2016_R=="ZWROTKOWICZ")
union(x,y)
for(i in col_names){
l<-append(which(Data[[i]]=="ZWROTKOWICZ"))
}
for(i in col_names){
l<-lappend(which(Data[[i]]=="ZWROTKOWICZ"))
}
2/5
as.integer(2)/as.integer(5)
